import weka.core.FastVector;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Attribute;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;



public class Classificador {
	Classifier classificador;
	
	
	Classificador(){
		try {
			//Carrega modelo gerado no Weka
			classificador = (Classifier) weka.core.SerializationHelper.read("classificador.model");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public Boolean underspecify(int contextsize, int samevpos, String hpos, int samehpos, int sametypelandmark, Boolean abs)
	{
		
		
		//Declara atributos
		FastVector listaAtributos= new FastVector(7);
		Attribute contextSizeAtt = new Attribute("contextsize");
		Attribute samevposAtt = new Attribute("samevpos");
		//hpos
		FastVector valoresHpos= new FastVector(2);
		valoresHpos.addElement("right");
		valoresHpos.addElement("left");
		Attribute hposAtt = new Attribute("hpos",valoresHpos);
		Attribute samehposAtt =  new Attribute("samehpos");
		Attribute sametypelandmarkAtt = new Attribute("sametypelandmark");
		Attribute absAtt = new Attribute("abs");
		//Declara atributo ReferenceType
		FastVector valoresRef = new FastVector(3);
		valoresRef.addElement("fully-spec");
		valoresRef.addElement("under-spec");
		valoresRef.addElement("others");
		Attribute referencetypeAtt = new Attribute("referencetype",valoresRef);
		//Adiciona atributos na lista
		listaAtributos.addElement(contextSizeAtt);
		listaAtributos.addElement(samevposAtt);
		listaAtributos.addElement(hposAtt);
		listaAtributos.addElement(samehposAtt);
		listaAtributos.addElement(sametypelandmarkAtt);
		listaAtributos.addElement(absAtt);
		listaAtributos.addElement(referencetypeAtt);
		
		//Cria instancia
		Instances teste = new Instances("teste", listaAtributos, 1);
		teste.
				
		
		//Inicializa instancia
		Instance instancia = new Instance(7); 
		instancia.setDataset(teste);
		instancia.setValue(0, contextsize);
		instancia.setValue(1, samevpos);
		instancia.setValue(2, hpos);
		instancia.setValue(3, samehpos);
		instancia.setValue(4, sametypelandmark);
		instancia.setValue(5, abs?1:0);
		instancia.setValue(6, "others");
		
		//adiciona instancia ao dataset
		teste.add(instancia);
		teste.setClassIndex(teste.numAttributes() - 1);
		
		//Classifica
		double a;
		try {
			a = classificador.classifyInstance(teste.instance(0));
			System.out.println(teste.classAttribute().value((int) a));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return true;	
	}
	
	public void testa(){
		Instances teste = inicializaInstancias("training.arff");
		teste.setClassIndex(teste.numAttributes() - 1);
		
		try {
			Evaluation eTest = new Evaluation(teste);
			eTest.evaluateModel(classificador, teste);
			
			System.out.println(eTest.toSummaryString("\nResultados\n======\n", false));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			double a = classificador.classifyInstance(teste.instance(7));
			System.out.println(teste.classAttribute().value((int) a));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	private static Instances inicializaInstancias(String a)
	{
		BufferedReader br;
		Instances instancia;
		try {
			br = new BufferedReader(new FileReader(a));
			instancia = new Instances(br);
			br.close();
			
		} catch (IOException e) {
			//Retorna null caso não encontre arquivos de base, avisa em caso de erro
			System.out.println("Arquivo(s) de base não foram encontrados/Erro de leitura de arquivos");
			e.printStackTrace();
			
			return null;
		}
		return instancia;
		
	}
	
}
